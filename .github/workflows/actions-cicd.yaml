name: CI/CD Pipeline for Node.js API with SonarQube

on:
  push:
    branches:
      - main
      - hcs522-devops-pipeline
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fullstack-challenge-dev
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # disable shallow cloning for SonarQbue

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ github.ref }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ github.ref }}-
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: |
          npm ci --omit=dev
          npm dedupe

      - name: Set Database Environment Variables
        run: |
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV

      - name: Run Database Setup
        run: |
          npm run dev:db:drop
          npm run dev:db:create
          npm run dev:db:migrate
          #(extra for prod) npm run prod:db:seed

      - name: Run Tests
        run: npm run test

      - name: Generate Test Coverage Report
        run: |
          npm run test:cov
          mv coverage/lcov.info coverage/coverage.lcov

      - name: Code Quality Analysis with SonarQube
        uses: sonarsource/sonarqube-scan-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST }}

      - name: Upload SonarQube Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-coverage-report
          path: './coverage/coverage.lcov'

      - name: Wait for SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST }}

      - name: Install jq if not already installed
        run: |
          if ! command -v jq &> /dev/null
          then
            echo "jq is not installed. Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi

      - name: Create Directory for Trivy Reports
        run: mkdir -p ./trivy-reports

      - name: Dependency Scan with Trivy
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: 'fs'
          format: 'json'
          output: './trivy-reports/trivy-dependency-check.json'

      - name: Extract Trivy Vulnerability Counts
        run: |
          CRITICAL_COUNT=$(jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "CRITICAL")] | length' ./trivy-reports/trivy-dependency-check.json)
          HIGH_COUNT=$(jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "HIGH")] | length' ./trivy-reports/trivy-dependency-check.json)
          echo "Critical Vulnerabilities: $CRITICAL_COUNT"
          echo "High Vulnerabilities: $HIGH_COUNT"

      - name: Upload Trivy Dependency Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-dependency-check-report
          path: './trivy-reports/trivy-dependency-check.json'

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Slim Toolkit and Vulnerability Database
        uses: actions/cache@v3
        with:
          path: |
            ~/.slim
            ~/.cache/trivy
          key: ${{ runner.os }}-toolkit-trivy-cache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-toolkit-trivy-cache-

      - name: Build Docker Image
        run: |
          export IMAGE_TAG=ghcr.io/theflyingpig83/solid-api/node-api:${{ github.sha }}
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and Optimize Docker Image with Slim
        uses: kitabisa/docker-slim-action@v1.1.2
        with:
          target: ${{ env.IMAGE_TAG }}
          tag: ${{ env.IMAGE_TAG }}-slim
        env:
          DSLIM_HTTP_PROBE: false
          DSLIM_USE_DOCKER_AUTH: true

      - name: Scan Slimmed Docker Image with Trivy
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: image
          image-ref: ${{ env.IMAGE_TAG }}-slim
          format: json
          output: trivy-reports/docker_scan_report_slim.json
          severity: CRITICAL,HIGH
          ignore-unfixed: true

      - name: Fail if Vulnerabilities Found
        run: |
          VULN_COUNT=$(jq '.Results[].Vulnerabilities | length' trivy-reports/docker_scan_report_slim.json | jq -s 'add')
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "Vulnerabilities found in slimmed image: $VULN_COUNT. Failing the pipeline."
            exit 1
          else
            echo "No vulnerabilities found."
          fi

      - name: Push Slimmed Docker Image
        run: |
          SLIM_IMAGE_TAG=${{ env.IMAGE_TAG }}-slim
          docker tag $IMAGE_TAG $SLIM_IMAGE_TAG
          docker push $SLIM_IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Namespace if Not Exists
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > ~/.kube/config
          kubectl config use-context digitalocean-k3s-context
          kubectl get namespace solid-api-2024 || kubectl create namespace solid-api-2024

      - name: Update Deployment Manifests with Image Tag
        working-directory: ${{ github.workspace }}
        run: |
          sed -i "s|<SLIM_IMAGE_TAG>|${{ github.sha }}-slim|g" k3s-deployment.yaml

      - name: Deploy to K3s Kubernetes Cluster
        run: kubectl apply -f k3s-deployment.yaml
